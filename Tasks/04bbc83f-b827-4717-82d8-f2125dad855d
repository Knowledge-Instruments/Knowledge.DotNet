{
  "Id": "04bbc83f-b827-4717-82d8-f2125dad855d",
  "Title": "Ссылочные и значимые типы данных",
  "Description": "В .NET, существует два основных типа данных: значимый (Value Type) и ссылочный (Reference Type).\r\n\r\nЗначимые типы данных хранят значение прямо в самой переменной. Когда вы присваиваете значение одной переменной другой, копируется само значение. Такие типы данных включают в себя целые типы, типы с плавающей точкой, структуры и перечисления.\r\n\r\nСсылочные типы данных, напротив, хранят ссылку на объект в памяти, а не само значение. Когда вы присваиваете значение одной переменной другой, копируется только ссылка, а не сам объект. Такие типы данных включают в себя классы, массивы и строки.\r\n\r\nВ заключение, можно сказать, что основное различие между значимыми и ссылочными типами в .NET заключается в том, как они хранят данные и как они передают их между переменными. Вы можете рассматривать значимые типы как \"копии значений\", которые независимы друг от друга, а ссылочные типы как \"указатели\" на один и тот же объект в памяти.\r\n\r\nКогда работаете с значимыми типами, изменение одной переменной не повлияет на другую. В случае с ссылочными типами, все переменные, ссылающиеся на один и тот же объект, будут видеть изменения, сделанные в любой из этих переменных.\r\n\r\nТакже следует отметить, что значимые типы обычно используются для хранения простых данных, таких как числа или логические значения, в то время как ссылочные типы используются для хранения более сложных структур данных, таких как коллекции или объекты.\r\n\r\n// Пример значимого типа\r\nint x = 10;\r\nint y = x;\r\ny = 20;\r\nConsole.WriteLine(\"x = \" + x);  // выведет \"x = 10\"\r\nConsole.WriteLine(\"y = \" + y);  // выведет \"y = 20\"\r\n\r\nКак вы можете видеть, в первом примере, когда мы изменяем значение y, значение x не изменяется, так как x и y являются независимыми копиями значений.\r\n\r\n// Пример ссылочного типа\r\nStringBuilder sb1 = new StringBuilder(\"Hello\");\r\nStringBuilder sb2 = sb1;\r\nsb2.Append(\", World!\");\r\nConsole.WriteLine(sb1.ToString());  // выведет \"Hello, World!\"\r\nConsole.WriteLine(sb2.ToString());  // выведет \"Hello, World!\"\r\n\r\nВо втором примере, когда мы используем sb2 для изменения строки, изменения видны в обеих переменных sb1 и sb2, так как они ссылаются на один и тот же объект StringBuilder.\r\n",
  "IsCompleted": false,
  "CreatedDateTime": "2023-02-03T10:54:47.392+00:00",
  "UnlockedDateTime": null,
  "CompletedDateTime": null,
  "ArchiveDateTime": null,
  "PlannedBeginDateTime": null,
  "PlannedEndDateTime": null,
  "PlannedDuration": null,
  "ContainsTasks": [],
  "BlocksTasks": [
    "54005344-7ff8-4f34-a9aa-a1bbb1d2a76e",
    "a730786d-56fb-467f-871e-6be0bca5cdc5"
  ],
  "Repeater": null,
  "Importance": 0,
  "Wanted": false
}